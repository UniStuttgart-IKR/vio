.globl core.start


@core>
init
start
private
init:       la      x3, @core
            addi    x3, x3,-8
            jlib    x3, @core.start

start:      li      frame, 0x805
            la      t0, exc_handel
            csrw    mtval, t0
            push    4,8
            jal     entry
            addi    t0, t1,2
            addi    t3, t4,5

entry:
            pushg   1, 0
            sp      ra, 0(frame)
            sw      ra, 0(frame)

            la      a0, @hdmi

            la      s0, @usb
            mv      s1, s0
            sp      s1, 0(frame)

            jlib    s0, @usb.af

            lp      s0, 0(frame)
            jlib    s0, @usb.b

            ebreak

            nop
            nop
exc_handel: j       exc_handel


@usb>
af
b
private

af:         addi    t0, t1,2
            addi    t3, t4,5
            ret                 #standard risc-v pseudo-instruction for jalr zero, 0(ra)

b:          push    0,0
            sw      ra, 0(frame)
            jal     c
            lw      ra, 0(frame)
            ret                 #standard risc-v pseudo-instruction for jr zero, 0(ra)

c:          pushg   0,0
            sw      ra, 0(frame)
            sp      ra, 0(frame)
            jlib    a0, @hdmi.s
            lp      ra, 0(frame)
            lw      ra, 0(frame)
            ret                 #standard risc-v pseudo-instruction for jr zero, 0(ra)



@hdmi>
s
private

s:          addi    t0, t1,2
            addi    t3, t4,5
            ret                 #standard risc-v pseudo-instruction for jr zero, 0(ra)


