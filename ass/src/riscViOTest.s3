.globl core.start


@core>
start
init
private
start:      la      x3, @core
            addi    x3, x3,-8
            jlib    x3, @core.init
            nop
            nop

init:     
            li      frame, 0x805
            la      t0, exc_handel
            csrw    mtvec, t0

            # Device 1
            li      t1, 1
            # 3 Registers, register capability
            li      t2, 3 * 2 + 0
            ciop    s9, t1, t2

            # without this lw there is no way to clear t0 pointer tag
            lw      t0, 0(zero)
            li      t0, 'I'
            sb      t0, 0(s9)
            li      t0, 'T'
            sb      t0, 0(s9)
            li      t0, 'S'
            sb      t0, 0(s9)
            li      t0, ' '
            sb      t0, 0(s9)
            li      t0, 'A'
            sb      t0, 0(s9)
            li      t0, 'L'
            sb      t0, 0(s9)
            li      t0, 'I'
            sb      t0, 0(s9)
            li      t0, 'V'
            sb      t0, 0(s9)
            li      t0, 'E'
            sb      t0, 0(s9)
            li      t0, '!'
            sb      t0, 0(s9)
            li      t0, 10
            sb      t0, 0(s9)


            push    4,8
            jal     entry
            addi    t0, t1,2
            addi    t3, t4,5

entry:
            pushg   1,2
            sp      ra, 0(frame)

            la      a0, @hdmi



            la      s0, @usb
            mv      s1, s0
            sp      s1, 0(frame)

            jlib    s0, @usb.af

            lp      s0, 0(frame)
            jlib    s0, @usb.b

            ebreak

            nop
            nop


exc_handel:
            nop
            nop
            nop
            nop
            nop
            nop 
            nop
            nop
            mret
            # test instr abort
            addi    t0, t0, -5
            addi    t1, t1, -9


@usb>
af
b
private

af:         addi    t0, t1,2
            addi    t3, t4,5
            ret                 #standard risc-v pseudo-instruction for jalr zero, 0(ra)

b:          pushg   0,0
            sp      ra, 0(frame)
            jal     c
            lp      ra, 0(frame)
            pop
            ret                 #standard risc-v pseudo-instruction for jr zero, 0(ra)

c:          pushg   0,0
            sp      ra, 0(frame)
            jlib    a0, @hdmi.s
            lp      ra, 0(frame)
            pop
            ret                 #standard risc-v pseudo-instruction for jr zero, 0(ra)



@hdmi>
s
private

s:          addi    t0, t1,2
            addi    t3, t4,5
            ret                 #standard risc-v pseudo-instruction for jr zero, 0(ra)


