--
-- VHDL Architecture riscvio_lib.riscvio.struct
--
-- Created:
--          by - rbnlux.ckoehler (pc038)
--          at - 18:22:20 06/05/24
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2022.3 Built on 14 Jul 2022 at 13:56:12
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
LIBRARY riscvio_lib;
USE riscvio_lib.isa.all;
LIBRARY altera_mf;
USE altera_mf.altera_mf_components.all;


ARCHITECTURE struct OF riscvio IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL a                  : word_T;
   SIGNAL address_b          : std_logic_vector(8 DOWNTO 0);
   SIGNAL alc_addr_ex_u      : word_T;
   SIGNAL alu_a_in_sel_dc    : alu_in_sel_T;
   SIGNAL alu_b_in_sel_dc    : alu_in_sel_T;
   SIGNAL alu_mode_dc        : alu_mode_T;
   SIGNAL alu_out_ex         : word_T;
   SIGNAL alu_out_ex_u       : word_T;
   SIGNAL alu_out_me         : word_T;
   SIGNAL b                  : word_T;
   SIGNAL byteena_b          : STD_LOGIC_VECTOR(7 DOWNTO 0) := (OTHERS => '1');
   SIGNAL clr_addr           : word_T;
   SIGNAL clr_pgu_mode_me    : boolean;
   SIGNAL clr_stall          : boolean;
   SIGNAL clr_wr             : boolean;
   SIGNAL csr_ix             : csr_ix_T;
   SIGNAL csr_val            : word_T;
   SIGNAL ctrl_dc            : ctrl_sig_T;
   SIGNAL ctrl_dc_u          : ctrl_sig_t;
   SIGNAL ctrl_ex            : ctrl_sig_T;
   SIGNAL ctrl_me            : ctrl_sig_T;
   SIGNAL current_pc_d       : pc_T;
   SIGNAL data_b             : STD_LOGIC_VECTOR(63 DOWNTO 0);
   SIGNAL data_ram_address_a : STD_LOGIC_VECTOR(9 DOWNTO 0);
   SIGNAL data_ram_byteena_a : STD_LOGIC_VECTOR(3 DOWNTO 0) := (OTHERS => '1');
   SIGNAL data_ram_data_a    : STD_LOGIC_VECTOR(31 DOWNTO 0);
   SIGNAL data_ram_wren_a    : STD_LOGIC                    := '0';
   SIGNAL dbt                : pc_T;
   SIGNAL dbt_valid          : boolean;
   SIGNAL dram_address_a     : STD_LOGIC_VECTOR(9 DOWNTO 0);
   SIGNAL dram_byteena_a     : STD_LOGIC_VECTOR(3 DOWNTO 0);
   SIGNAL dram_data_a        : STD_LOGIC_VECTOR(31 DOWNTO 0);
   SIGNAL dram_wren_a        : STD_LOGIC;
   SIGNAL flags              : alu_flags_T;
   SIGNAL if_instr           : word_T;
   SIGNAL if_instr_d         : word_T;
   SIGNAL imm_dc             : word_T;
   SIGNAL imm_dc_u           : word_T;
   SIGNAL imm_ex             : word_T;
   SIGNAL imm_me             : word_T;
   SIGNAL incremented_pc     : pc_T;
   SIGNAL mem_out_ex_u       : word_T;
   SIGNAL pc_current_pc      : pc_T;
   SIGNAL pc_dc              : pc_T;
   SIGNAL pc_if              : pc_T;
   SIGNAL pgu_mode_dc        : pgu_mode_T;
   SIGNAL q_a                : STD_LOGIC_VECTOR(31 DOWNTO 0);
   SIGNAL q_b                : STD_LOGIC_VECTOR(63 DOWNTO 0);
   SIGNAL raux_dc            : raux_T;
   SIGNAL raux_dc_u          : raux_T;
   SIGNAL raux_ex            : raux_T;
   SIGNAL raux_ix            : reg_ix_T;
   SIGNAL raux_me            : raux_T;
   SIGNAL raux_rf            : raux_T;
   SIGNAL rd_wb              : reg_wb_T;
   SIGNAL rdat_dc            : rdat_T;
   SIGNAL rdat_dc_u          : rdat_T;
   SIGNAL rdat_ex            : rdat_T;
   SIGNAL rdat_ix            : reg_ix_T;
   SIGNAL rdat_me            : rdat_T;
   SIGNAL rdat_rf            : rdat_T;
   SIGNAL rdst_ix_dc         : reg_ix_T;
   SIGNAL rdst_ix_dc_u       : reg_ix_T;
   SIGNAL rdst_ix_ex         : reg_ix_T;
   SIGNAL rdst_ix_me         : reg_ix_T;
   SIGNAL rptr_dc            : rptr_T;
   SIGNAL rptr_dc_u          : rptr_T;
   SIGNAL rptr_ex            : rptr_T;
   SIGNAL rptr_ex_u          : rptr_T;
   SIGNAL rptr_ix            : reg_ix_T;
   SIGNAL rptr_me            : rptr_T;
   SIGNAL rptr_rf            : rptr_T;
   SIGNAL sbt                : pc_T;
   SIGNAL sbt_valid          : boolean;
   SIGNAL wren_b             : STD_LOGIC                    := '0';


   -- Component Declarations
   COMPONENT alu
   PORT (
      a       : IN     word_T ;
      b       : IN     word_T ;
      mode    : IN     alu_mode_T ;
      alu_out : OUT    word_T ;
      flags   : OUT    alu_flags_T 
   );
   END COMPONENT;
   COMPONENT alu_a_mux
   PORT (
      alu_a_in_sel : IN     alu_in_sel_T ;
      raux_dc      : IN     raux_T ;
      rdat_dc      : IN     rdat_T ;
      rptr_dc      : IN     rptr_T ;
      a            : OUT    word_T 
   );
   END COMPONENT;
   COMPONENT alu_b_mux
   PORT (
      alu_b_in_sel : IN     alu_in_sel_T ;
      imm_dc       : IN     word_T ;
      raux_dc      : IN     raux_T ;
      rdat_dc      : IN     rdat_T ;
      rptr_dc      : IN     rptr_T ;
      b            : OUT    word_T 
   );
   END COMPONENT;
   COMPONENT at_reg
   PORT (
      alu_out_me : IN     word_T ;
      clk        : IN     std_logic ;
      clr_stall  : IN     boolean ;
      ctrl_me    : IN     ctrl_sig_T ;
      imm_me     : IN     word_T ;
      raux_me    : IN     raux_T ;
      rdat_me    : IN     rdat_T ;
      rdst_ix_me : IN     reg_ix_T ;
      res_n      : IN     std_logic ;
      rptr_me    : IN     rptr_T ;
      rd_wb      : OUT    reg_wb_T 
   );
   END COMPONENT;
   COMPONENT block_ram_if
   PORT (
      addr           : IN     word_T ;
      dram_q_a       : IN     STD_LOGIC_VECTOR (31 DOWNTO 0);
      raux           : IN     raux_T ;
      rptr           : IN     rptr_T ;
      dram_address_a : OUT    STD_LOGIC_VECTOR (9 DOWNTO 0);
      dram_byteena_a : OUT    STD_LOGIC_VECTOR (3 DOWNTO 0);
      dram_data_a    : OUT    STD_LOGIC_VECTOR (31 DOWNTO 0);
      dram_wren_a    : OUT    STD_LOGIC ;
      mem_out        : OUT    word_T 
   );
   END COMPONENT;
   COMPONENT clr_ptrs_fsm
   PORT (
      alu_out_ex      : IN     word_T ;
      clk             : IN     std_logic ;
      ctrl_ex         : IN     ctrl_sig_T ;
      rdst_ix_ex      : IN     reg_ix_T ;
      res_n           : IN     std_logic ;
      rptr_ex         : IN     rptr_T ;
      rptr_ex_u       : IN     rptr_T ;
      clr_addr        : OUT    word_T ;
      clr_pgu_mode_me : OUT    boolean ;
      clr_stall       : OUT    boolean ;
      clr_wr          : OUT    boolean 
   );
   END COMPONENT;
   COMPONENT csr_rf_mux
   PORT (
      csr_val   : IN     word_T ;
      raux_rf   : IN     raux_T ;
      rdat_ix   : IN     reg_ix_T ;
      rdat_rf   : IN     rdat_T ;
      rptr_ix   : IN     reg_ix_T ;
      rptr_rf   : IN     rptr_T ;
      raux_dc_u : OUT    raux_T ;
      rdat_dc_u : OUT    rdat_T ;
      rptr_dc_u : OUT    rptr_T 
   );
   END COMPONENT;
   COMPONENT csr_unit
   PORT (
      clk     : IN     std_logic ;
      csr_ix  : IN     csr_ix_T ;
      rd_wb   : IN     reg_wb_T ;
      res_n   : IN     std_logic ;
      csr_val : OUT    word_T 
   );
   END COMPONENT;
   COMPONENT dc_reg
   PORT (
      clk             : IN     std_logic ;
      clr_stall       : IN     boolean ;
      ctrl_dc_u       : IN     ctrl_sig_t ;
      dbt_valid       : IN     boolean ;
      imm_dc_u        : IN     word_T ;
      pc_if           : IN     pc_T ;
      raux_dc_u       : IN     raux_T ;
      rdat_dc_u       : IN     rdat_T ;
      rdst_ix_dc_u    : IN     reg_ix_T ;
      res_n           : IN     std_logic ;
      rptr_dc_u       : IN     rptr_T ;
      alu_a_in_sel_dc : OUT    alu_in_sel_T ;
      alu_b_in_sel_dc : OUT    alu_in_sel_T ;
      alu_mode_dc     : OUT    alu_mode_T ;
      ctrl_dc         : OUT    ctrl_sig_T ;
      imm_dc          : OUT    word_T ;
      pc_dc           : OUT    pc_T ;
      pgu_mode_dc     : OUT    pgu_mode_T ;
      raux_dc         : OUT    raux_T ;
      rdat_dc         : OUT    rdat_T ;
      rdst_ix_dc      : OUT    reg_ix_T ;
      rptr_dc         : OUT    rptr_T 
   );
   END COMPONENT;
   COMPONENT dcbr_wraccess_mux
   PORT (
      clr_addr           : IN     word_T ;
      clr_wr             : IN     boolean ;
      dram_address_a     : IN     STD_LOGIC_VECTOR (9 DOWNTO 0);
      dram_byteena_a     : IN     STD_LOGIC_VECTOR (3 DOWNTO 0);
      dram_data_a        : IN     STD_LOGIC_VECTOR (31 DOWNTO 0);
      dram_wren_a        : IN     STD_LOGIC ;
      data_ram_address_a : OUT    STD_LOGIC_VECTOR (9 DOWNTO 0);
      data_ram_byteena_a : OUT    STD_LOGIC_VECTOR (3 DOWNTO 0);
      data_ram_data_a    : OUT    STD_LOGIC_VECTOR (31 DOWNTO 0);
      data_ram_wren_a    : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT decoder
   PORT (
      instruction : IN     word_T;
      pc          : IN     pc_T;
      csr_ix      : OUT    csr_ix_T;
      ctr_sig     : OUT    ctrl_sig_t;
      imm         : OUT    word_T;
      raux_ix     : OUT    reg_ix_T;
      rdat_ix     : OUT    reg_ix_T;
      rdst_ix     : OUT    reg_ix_T;
      rptr_ix     : OUT    reg_ix_T;
      sbt         : OUT    pc_T;
      sbt_valid   : OUT    boolean
   );
   END COMPONENT;
   COMPONENT dual_port_memory
   PORT (
      address_a : IN     STD_LOGIC_VECTOR (9 DOWNTO 0);
      address_b : IN     STD_LOGIC_VECTOR (8 DOWNTO 0);
      byteena_a : IN     STD_LOGIC_VECTOR (3 DOWNTO 0) := (OTHERS => '1');
      byteena_b : IN     STD_LOGIC_VECTOR (7 DOWNTO 0) := (OTHERS => '1');
      clock     : IN     STD_LOGIC                     := '1';
      data_a    : IN     STD_LOGIC_VECTOR (31 DOWNTO 0);
      data_b    : IN     STD_LOGIC_VECTOR (63 DOWNTO 0);
      wren_a    : IN     STD_LOGIC                     := '0';
      wren_b    : IN     STD_LOGIC                     := '0';
      q_a       : OUT    STD_LOGIC_VECTOR (31 DOWNTO 0);
      q_b       : OUT    STD_LOGIC_VECTOR (63 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT dyn_branch_unit
   PORT (
      alu_flags : IN     alu_flags_T;
      ctrl_sig  : IN     ctrl_sig_T;
      imm       : IN     word_T;
      pc        : IN     pc_T;
      dbt       : OUT    pc_T;
      dbt_valid : OUT    boolean
   );
   END COMPONENT;
   COMPONENT ex_reg
   PORT (
      alc_addr_ex_u   : IN     word_T ;
      alu_out_ex_u    : IN     word_T ;
      clk             : IN     std_logic ;
      clr_pgu_mode_me : IN     boolean ;
      clr_stall       : IN     boolean ;
      ctrl_dc         : IN     ctrl_sig_T ;
      imm_dc          : IN     word_T ;
      raux_dc         : IN     raux_T ;
      rdat_dc         : IN     rdat_T ;
      rdst_ix_dc      : IN     reg_ix_T ;
      res_n           : IN     std_logic ;
      rptr_dc         : IN     rptr_T ;
      alu_out_ex      : OUT    word_T ;
      ctrl_ex         : OUT    ctrl_sig_T ;
      imm_ex          : OUT    word_T ;
      raux_ex         : OUT    raux_T ;
      rdat_ex         : OUT    rdat_T ;
      rdst_ix_ex      : OUT    reg_ix_T ;
      rptr_ex         : OUT    rptr_T ;
      rptr_ex_u       : OUT    rptr_T 
   );
   END COMPONENT;
   COMPONENT if_reg
   PORT (
      clk           : IN     std_logic ;
      clr_stall     : IN     boolean ;
      dbt_valid     : IN     boolean ;
      if_instr_d    : IN     word_T ;
      pc_current_pc : IN     pc_T ;
      res_n         : IN     std_logic ;
      sbt_valid     : IN     boolean ;
      if_instr      : OUT    word_T ;
      pc_if         : OUT    pc_T 
   );
   END COMPONENT;
   COMPONENT instruction_rom
   PORT (
      clock : IN     STD_LOGIC  := '1';
      pc    : IN     pc_T;
      q     : OUT    STD_LOGIC_VECTOR (31 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT me_reg
   PORT (
      alu_out_ex   : IN     word_T ;
      clk          : IN     std_logic ;
      clr_stall    : IN     boolean ;
      ctrl_ex      : IN     ctrl_sig_T ;
      imm_ex       : IN     word_T ;
      mem_out_ex_u : IN     word_T ;
      raux_ex      : IN     raux_T ;
      rdat_ex      : IN     rdat_T ;
      rdst_ix_ex   : IN     reg_ix_T ;
      res_n        : IN     std_logic ;
      rptr_ex      : IN     rptr_T ;
      alu_out_me   : OUT    word_T ;
      ctrl_me      : OUT    ctrl_sig_T ;
      imm_me       : OUT    word_T ;
      raux_me      : OUT    raux_T ;
      rdat_me      : OUT    rdat_T ;
      rdst_ix_me   : OUT    reg_ix_T ;
      rptr_me      : OUT    rptr_T 
   );
   END COMPONENT;
   COMPONENT next_pc_mux
   PORT (
      dbta_valid        : IN     boolean;
      dynamic_branch_pc : IN     pc_T;
      incremented_pc    : IN     pc_T;
      sbta_valid        : IN     boolean;
      static_branch_pc  : IN     pc_T;
      next_pc           : OUT    pc_T
   );
   END COMPONENT;
   COMPONENT pc_incrementer
   PORT (
      pc      : IN     pc_T;
      next_pc : OUT    pc_T
   );
   END COMPONENT;
   COMPONENT pc_reg
   PORT (
      clk           : IN     std_logic ;
      clr_stall     : IN     boolean ;
      current_pc_d  : IN     pc_T ;
      res_n         : IN     std_logic ;
      pc_current_pc : OUT    pc_T 
   );
   END COMPONENT;
   COMPONENT pgu
   PORT (
      imm      : IN     word_T ;
      pgu_mode : IN     pgu_mode_T ;
      raux     : IN     raux_T ;
      rdat     : IN     rdat_T ;
      rptr     : IN     rptr_T ;
      addr     : OUT    word_T 
   );
   END COMPONENT;
   COMPONENT register_file
   PORT (
      clk     : IN     std_logic;
      raux_ix : IN     reg_ix_T;
      rd_wb   : IN     reg_wb_T;
      rdat_ix : IN     reg_ix_T;
      res_n   : IN     std_logic;
      rptr_ix : IN     reg_ix_T;
      raux    : OUT    raux_T;
      rdat    : OUT    rdat_T;
      rptr    : OUT    rptr_T
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : alu USE ENTITY riscvio_lib.alu;
   FOR ALL : alu_a_mux USE ENTITY riscvio_lib.alu_a_mux;
   FOR ALL : alu_b_mux USE ENTITY riscvio_lib.alu_b_mux;
   FOR ALL : at_reg USE ENTITY riscvio_lib.at_reg;
   FOR ALL : block_ram_if USE ENTITY riscvio_lib.block_ram_if;
   FOR ALL : clr_ptrs_fsm USE ENTITY riscvio_lib.clr_ptrs_fsm;
   FOR ALL : csr_rf_mux USE ENTITY riscvio_lib.csr_rf_mux;
   FOR ALL : csr_unit USE ENTITY riscvio_lib.csr_unit;
   FOR ALL : dc_reg USE ENTITY riscvio_lib.dc_reg;
   FOR ALL : dcbr_wraccess_mux USE ENTITY riscvio_lib.dcbr_wraccess_mux;
   FOR ALL : decoder USE ENTITY riscvio_lib.decoder;
   FOR ALL : dual_port_memory USE ENTITY riscvio_lib.dual_port_memory;
   FOR ALL : dyn_branch_unit USE ENTITY riscvio_lib.dyn_branch_unit;
   FOR ALL : ex_reg USE ENTITY riscvio_lib.ex_reg;
   FOR ALL : if_reg USE ENTITY riscvio_lib.if_reg;
   FOR ALL : instruction_rom USE ENTITY riscvio_lib.instruction_rom;
   FOR ALL : me_reg USE ENTITY riscvio_lib.me_reg;
   FOR ALL : next_pc_mux USE ENTITY riscvio_lib.next_pc_mux;
   FOR ALL : pc_incrementer USE ENTITY riscvio_lib.pc_incrementer;
   FOR ALL : pc_reg USE ENTITY riscvio_lib.pc_reg;
   FOR ALL : pgu USE ENTITY riscvio_lib.pgu;
   FOR ALL : register_file USE ENTITY riscvio_lib.register_file;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   -- eb1 1  
   address_b <= (others => '0');
   byteena_b <= (others => '0');
   data_b <= (others => '0');
   wren_b <= '0';                                    


   -- Instance port mappings.
   alu_i : alu
      PORT MAP (
         a       => a,
         b       => b,
         mode    => alu_mode_dc,
         alu_out => alu_out_ex_u,
         flags   => flags
      );
   alu_a_mux_i : alu_a_mux
      PORT MAP (
         alu_a_in_sel => alu_a_in_sel_dc,
         raux_dc      => raux_dc,
         rdat_dc      => rdat_dc,
         rptr_dc      => rptr_dc,
         a            => a
      );
   alu_b_mux_i : alu_b_mux
      PORT MAP (
         alu_b_in_sel => alu_b_in_sel_dc,
         imm_dc       => imm_dc,
         raux_dc      => raux_dc,
         rdat_dc      => rdat_dc,
         rptr_dc      => rptr_dc,
         b            => b
      );
   at_reg_i : at_reg
      PORT MAP (
         alu_out_me => alu_out_me,
         clk        => clk,
         clr_stall  => clr_stall,
         ctrl_me    => ctrl_me,
         imm_me     => imm_me,
         raux_me    => raux_me,
         rdat_me    => rdat_me,
         rdst_ix_me => rdst_ix_me,
         res_n      => res_n,
         rptr_me    => rptr_me,
         rd_wb      => rd_wb
      );
   block_ram_if_i : block_ram_if
      PORT MAP (
         addr           => alu_out_ex,
         dram_q_a       => q_a,
         raux           => raux_ex,
         rptr           => rptr_ex,
         dram_address_a => dram_address_a,
         dram_byteena_a => dram_byteena_a,
         dram_data_a    => dram_data_a,
         dram_wren_a    => dram_wren_a,
         mem_out        => mem_out_ex_u
      );
   clr_ptrs_fsm_i : clr_ptrs_fsm
      PORT MAP (
         alu_out_ex      => alu_out_ex,
         clk             => clk,
         ctrl_ex         => ctrl_ex,
         rdst_ix_ex      => rdst_ix_ex,
         res_n           => res_n,
         rptr_ex         => rptr_ex,
         rptr_ex_u       => rptr_ex_u,
         clr_addr        => clr_addr,
         clr_pgu_mode_me => clr_pgu_mode_me,
         clr_stall       => clr_stall,
         clr_wr          => clr_wr
      );
   U_0 : csr_rf_mux
      PORT MAP (
         csr_val   => csr_val,
         raux_rf   => raux_rf,
         rdat_ix   => rdat_ix,
         rdat_rf   => rdat_rf,
         rptr_ix   => rptr_ix,
         rptr_rf   => rptr_rf,
         raux_dc_u => raux_dc_u,
         rdat_dc_u => rdat_dc_u,
         rptr_dc_u => rptr_dc_u
      );
   csr_unit_i : csr_unit
      PORT MAP (
         clk     => clk,
         csr_ix  => csr_ix,
         rd_wb   => rd_wb,
         res_n   => res_n,
         csr_val => csr_val
      );
   dc_reg_i : dc_reg
      PORT MAP (
         clk             => clk,
         clr_stall       => clr_stall,
         ctrl_dc_u       => ctrl_dc_u,
         dbt_valid       => dbt_valid,
         imm_dc_u        => imm_dc_u,
         pc_if           => pc_if,
         raux_dc_u       => raux_dc_u,
         rdat_dc_u       => rdat_dc_u,
         rdst_ix_dc_u    => rdst_ix_dc_u,
         res_n           => res_n,
         rptr_dc_u       => rptr_dc_u,
         alu_a_in_sel_dc => alu_a_in_sel_dc,
         alu_b_in_sel_dc => alu_b_in_sel_dc,
         alu_mode_dc     => alu_mode_dc,
         ctrl_dc         => ctrl_dc,
         imm_dc          => imm_dc,
         pc_dc           => pc_dc,
         pgu_mode_dc     => pgu_mode_dc,
         raux_dc         => raux_dc,
         rdat_dc         => rdat_dc,
         rdst_ix_dc      => rdst_ix_dc,
         rptr_dc         => rptr_dc
      );
   dcbr_wraccs_mux_i : dcbr_wraccess_mux
      PORT MAP (
         clr_addr           => clr_addr,
         clr_wr             => clr_wr,
         dram_address_a     => dram_address_a,
         dram_byteena_a     => dram_byteena_a,
         dram_data_a        => dram_data_a,
         dram_wren_a        => dram_wren_a,
         data_ram_address_a => data_ram_address_a,
         data_ram_byteena_a => data_ram_byteena_a,
         data_ram_data_a    => data_ram_data_a,
         data_ram_wren_a    => data_ram_wren_a
      );
   decoder_i : decoder
      PORT MAP (
         pc          => pc_if,
         instruction => if_instr,
         rdat_ix     => rdat_ix,
         rptr_ix     => rptr_ix,
         raux_ix     => raux_ix,
         csr_ix      => csr_ix,
         rdst_ix     => rdst_ix_dc_u,
         imm         => imm_dc_u,
         ctr_sig     => ctrl_dc_u,
         sbt_valid   => sbt_valid,
         sbt         => sbt
      );
   dram : dual_port_memory
      PORT MAP (
         address_a => data_ram_address_a,
         address_b => address_b,
         byteena_a => data_ram_byteena_a,
         byteena_b => byteena_b,
         clock     => clk,
         data_a    => data_ram_data_a,
         data_b    => data_b,
         wren_a    => data_ram_wren_a,
         wren_b    => wren_b,
         q_a       => q_a,
         q_b       => q_b
      );
   dbu_i : dyn_branch_unit
      PORT MAP (
         imm       => imm_dc,
         alu_flags => flags,
         ctrl_sig  => ctrl_dc,
         pc        => pc_dc,
         dbt_valid => dbt_valid,
         dbt       => dbt
      );
   ex_reg_i : ex_reg
      PORT MAP (
         alc_addr_ex_u   => alc_addr_ex_u,
         alu_out_ex_u    => alu_out_ex_u,
         clk             => clk,
         clr_pgu_mode_me => clr_pgu_mode_me,
         clr_stall       => clr_stall,
         ctrl_dc         => ctrl_dc,
         imm_dc          => imm_dc,
         raux_dc         => raux_dc,
         rdat_dc         => rdat_dc,
         rdst_ix_dc      => rdst_ix_dc,
         res_n           => res_n,
         rptr_dc         => rptr_dc,
         alu_out_ex      => alu_out_ex,
         ctrl_ex         => ctrl_ex,
         imm_ex          => imm_ex,
         raux_ex         => raux_ex,
         rdat_ex         => rdat_ex,
         rdst_ix_ex      => rdst_ix_ex,
         rptr_ex         => rptr_ex,
         rptr_ex_u       => rptr_ex_u
      );
   if_reg_i : if_reg
      PORT MAP (
         clk           => clk,
         clr_stall     => clr_stall,
         dbt_valid     => dbt_valid,
         if_instr_d    => if_instr_d,
         pc_current_pc => pc_current_pc,
         res_n         => res_n,
         sbt_valid     => sbt_valid,
         if_instr      => if_instr,
         pc_if         => pc_if
      );
   irom_i : instruction_rom
      PORT MAP (
         pc    => current_pc_d,
         clock => clk,
         q     => if_instr_d
      );
   me_reg_i : me_reg
      PORT MAP (
         alu_out_ex   => alu_out_ex,
         clk          => clk,
         clr_stall    => clr_stall,
         ctrl_ex      => ctrl_ex,
         imm_ex       => imm_ex,
         mem_out_ex_u => mem_out_ex_u,
         raux_ex      => raux_ex,
         rdat_ex      => rdat_ex,
         rdst_ix_ex   => rdst_ix_ex,
         res_n        => res_n,
         rptr_ex      => rptr_ex,
         alu_out_me   => alu_out_me,
         ctrl_me      => ctrl_me,
         imm_me       => imm_me,
         raux_me      => raux_me,
         rdat_me      => rdat_me,
         rdst_ix_me   => rdst_ix_me,
         rptr_me      => rptr_me
      );
   next_pc_mux_i : next_pc_mux
      PORT MAP (
         incremented_pc    => incremented_pc,
         static_branch_pc  => sbt,
         dynamic_branch_pc => dbt,
         dbta_valid        => dbt_valid,
         sbta_valid        => sbt_valid,
         next_pc           => current_pc_d
      );
   pc_increment_i : pc_incrementer
      PORT MAP (
         pc      => pc_current_pc,
         next_pc => incremented_pc
      );
   pc_reg_i : pc_reg
      PORT MAP (
         clk           => clk,
         clr_stall     => clr_stall,
         current_pc_d  => current_pc_d,
         res_n         => res_n,
         pc_current_pc => pc_current_pc
      );
   pgu_i : pgu
      PORT MAP (
         imm      => imm_dc,
         pgu_mode => pgu_mode_dc,
         raux     => raux_dc,
         rdat     => rdat_dc,
         rptr     => rptr_dc,
         addr     => alc_addr_ex_u
      );
   register_file_i : register_file
      PORT MAP (
         clk     => clk,
         res_n   => res_n,
         rdat_ix => rdat_ix,
         rptr_ix => rptr_ix,
         raux_ix => raux_ix,
         rdat    => rdat_rf,
         rptr    => rptr_rf,
         raux    => raux_rf,
         rd_wb   => rd_wb
      );

END struct;
